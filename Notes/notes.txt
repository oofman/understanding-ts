----------------------------------------------------------------
Basic Notes:
------------
TS = A JS Superset (A Language building up on JS)
Adds new Features & Advantages to JS
Browsers can't execute it (IE: Node.js also cant executed TS)

TS -> Compiled to -> JS

TS Additions:
- Types
- Decorators (Meta-Features)
- Interfaces or Generics (Non-JS Features)
- Next-gen JS Features (compiled down for old)

JS uses "dynamic types" (resolved at runtime)
TS uses "static types" (set during development)
----------------------------------------------------------------
1  - TS Basics
2  - TS Compiler & Config Deep dive
3  - Next-Gen JS Compiled
4  - Classes & Interfaces
5  - Advanced Types & TS Features
6  - Generics
7  - Decorators
8  - Full Project from scratch
9  - Namespaces & Modules
10 - Webpack & TS
11 - 3rd Party Libs & TS
12 - React & TS 
13 - NodeJS & TS
----------------------------------------------------------------
Section 1: TS Basics
----------------------------------------------------------------
Core Types:
------------
number:   1, 5.3, -10
string:   'Hi', "Hi", `Hi`
boolean:  true / false
object:   {age: 30}
array:    [1, 2, 3, 'Something']
Tuple:    [1,2]
Enum:     enum {NEW,OLD}
Any:      *
-------------
TS Types:
-------------
union:    (string | number)
literal:  ('as-number' | 'as-string')
alias:    type Combinable = ('as-number' | 'as-string')
function: (a: number, b: string) => number
unknown:  little better than any
never:    
----------------------------------------------------------------
Section 2: TS Compiler & Config Deep dive
----------------------------------------------------------------
Install dependancies
$ npm install

Start server on localhost:3000
$ npm start

Compile TS file: 
$ tsc app.ts

Compile continuously (watch mode):
$ tsc app.ts --watch (or -w for short-hand)

Initialize TS Project:
$ tsc --init (creates tsconfig.json file in root)
$ tsc (compiles all *.ts files)
$ tsc -w (compiles all *.ts files and enable watch mode)

tsconfig Docs: https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
Compiler Config Docs: https://www.typescriptlang.org/docs/handbook/compiler-options.html
VS Code TS Debugging: https://code.visualstudio.com/docs/typescript/typescript-debugging

----------------------------------------------------------------
Section 3: Next-Gen JS Compiled
----------------------------------------------------------------
List of supported functionalities:
https://kangax.github.io/compat-table/es6/

var scope = global / function
let/const = block scope

rest parameters
const add = (...numbers: number[]) => {};

// Destucturing array
const [hobby1, hobby2] = hobbies;

----------------------------------------------------------------
Section 4: Classes & Interfaces
----------------------------------------------------------------


----------------------------------------------------------------
Section 5: Advanced Types & TS Features
----------------------------------------------------------------
- Intersection types (combine other types)
- Type Gaurds: 
  - if (typeof a === "string") {}
  - if ('privileges' in emp) {}
  - if (vehicle instanceof Truck) {}
- Type Casting:
  - <HTMLInputElement>document.getElementById('user-input')!;
  - document.getElementById('user-input')! as HTMLInputElement;
  - (inputElement as HTMLInputElement).value = 'Hi there!';
- Optional Chaining:
  - fetchedUserData?.job?.title
- Nullish Coalecing
  - const stroredData = userInput ?? 'Default';
  - only if null or undefined
- More on Advanced Types: 
  - https://www.typescriptlang.org/docs/handbook/advanced-types.html

----------------------------------------------------------------
Section 6: Generics
----------------------------------------------------------------
More on Generics:
- https://www.typescriptlang.org/docs/handbook/generics.html
Promise (JS):
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
Primitive VS Ref Types:
- https://academind.com/tutorials/reference-vs-primitive-values/
Utility Types:
- https://www.typescriptlang.org/docs/handbook/utility-types.html

----------------------------------------------------------------
Section 7: Decorators
----------------------------------------------------------------

More on Decorators: https://www.typescriptlang.org/docs/handbook/decorators.html

----------------------------------------------------------------
Section 8: Full Project from scratch
----------------------------------------------------------------

More on Drag & Drop: https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API

----------------------------------------------------------------
Section 9: Namespaces & Modules
----------------------------------------------------------------

JavaScript Modules (Overview): https://medium.com/computed-comparisons/commonjs-vs-amd-vs-requirejs-vs-es6-modules-2e814b114a0b

More on ES Modules: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules

----------------------------------------------------------------
Section 10: Webpack & TS
----------------------------------------------------------------
