----------------------------------------------------------------
Basic Notes:
------------
TS = A JS Superset (A Language building up on JS)
Adds new Features & Advantages to JS
Browsers can't execute it (IE: Node.js also cant executed TS)

TS -> Compiled to -> JS

TS Additions:
- Types
- Decorators (Meta-Features)
- Interfaces or Generics (Non-JS Features)
- Next-gen JS Features (compiled down for old)

JS uses "dynamic types" (resolved at runtime)
TS uses "static types" (set during development)
----------------------------------------------------------------
1  - TS Basics
2  - TS Compiler & Config Deep dive
3  - Next-Get JS Compiled
4  - Classes & Interfaces
5  - Advanced Types & TS Features
6  - Generics
7  - Decorators
8  - Full Project from scratch
9  - Namespaces & Modules
10 - Webpack & TS
11 - 3rd Party Libs & TS
12 - React & TS 
13 - NodeJS & TS
----------------------------------------------------------------
Section 1: TS Basics
----------------------------------------------------------------
Core Types:
------------
number:   1, 5.3, -10
string:   'Hi', "Hi", `Hi`
boolean:  true / false
object:   {age: 30}
array:    [1, 2, 3, 'Something']
Tuple:    [1,2]
Enum:     enum {NEW,OLD}
Any:      *
-------------
TS Types:
-------------
union:    (string | number)
literal:  ('as-number' | 'as-string')
alias:    type Combinable = ('as-number' | 'as-string')
function: (a: number, b: string) => number
unknown:  little better than any
never:    
----------------------------------------------------------------
Section 2: TS Compiler & Config Deep dive
----------------------------------------------------------------
Compile TS file: 
$ tsc app.ts

Compile continuously (watch mode):
$ tsc app.ts --watch

